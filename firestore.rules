rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Règle pour la collection 'partners'
    match /partners/{partnerId} {
      allow read: if request.auth != null;
      // L'écriture (create, update, delete) est gérée par les Cloud Functions
      allow write: if false; 
    }

    // Les utilisateurs connectés peuvent lire la liste des récompenses.
    match /rewards/{rewardId} {
      allow read: if request.auth != null;
    }

    // Un utilisateur peut lire son propre historique de transactions.
    match /transactions/{transactionId} {
      allow read: if request.auth.uid == resource.data.userId;
    }

    // Règles pour les demandes de service
    match /conciergeRequests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.memberId;
    }

    // Chaque utilisateur peut accéder à son propre document.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
    }

    // Règle pour les discussions du forum (posts)
    match /community_posts/{postId} {
      // Tout utilisateur authentifié peut lire les discussions.
      allow read: if request.auth != null;
      
      // Un utilisateur authentifié peut créer une discussion si l'ID de l'auteur correspond au sien.
      allow create: if request.auth.uid == request.resource.data.authorId;
      
      // L'auteur d'une discussion peut la mettre à jour ou la supprimer.
      allow update, delete: if request.auth.uid == resource.data.authorId;
    }

    // Règle pour les commentaires du forum
    match /community_posts/{postId}/comments/{commentId} {
      // Tout utilisateur authentifié peut lire les commentaires.
      allow read: if request.auth != null;

      // Un utilisateur authentifié peut créer un commentaire si l'ID de l'auteur correspond au sien.
      allow create: if request.auth.uid == request.resource.data.authorId;

      // L'auteur d'un commentaire peut le supprimer.
      allow delete: if request.auth.uid == resource.data.authorId;
    }
  }
}
